name: Build Android APK

on:
  push:
    branches:
      - main
      - develop
      - 'claude/**'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release)'
        required: false
        default: 'debug'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-pip \
            build-essential \
            git \
            unzip \
            openjdk-17-jdk \
            autoconf \
            libtool \
            pkg-config \
            zlib1g-dev \
            libncurses5-dev \
            libncursesw5-dev \
            libtinfo5 \
            cmake \
            libffi-dev \
            libssl-dev \
            libsqlite3-dev \
            python3-setuptools \
            python3-wheel

      - name: Install Buildozer
        run: |
          pip3 install --upgrade buildozer cython

      - name: Set environment variables
        run: |
          echo "BUILDOZER_WARN_ON_ROOT=0" >> $GITHUB_ENV
          echo "ANDROIDSDK=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
          echo "ANDROIDNDK=$HOME/.buildozer/android/platform/android-ndk-r28c" >> $GITHUB_ENV
          echo "ANDROIDAPI=33" >> $GITHUB_ENV

      - name: Cache Buildozer global directory
        uses: actions/cache@v4
        with:
          path: .buildozer
          key: buildozer-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            buildozer-

      - name: Cache Buildozer SDK/NDK
        uses: actions/cache@v4
        with:
          path: ~/.buildozer
          key: buildozer-global-${{ runner.os }}-ndk-r28c
          restore-keys: |
            buildozer-global-${{ runner.os }}-

      - name: Apply SDL2 patches (if needed)
        run: |
          if [ -f apply_sdl2_patches.sh ]; then
            chmod +x apply_sdl2_patches.sh
            ./apply_sdl2_patches.sh || true
          fi

      - name: Build Android APK
        run: |
          export BUILDOZER_WARN_ON_ROOT=0
          buildozer android debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ github.run_number }}
          path: bin/*.apk
          retention-days: 30

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.run_number }}
          path: |
            .buildozer/android/platform/build-*/build.log
            .buildozer/android/platform/python-for-android/dist/**/*.log
          retention-days: 7
          if-no-files-found: ignore

      - name: Get APK info
        if: success()
        run: |
          echo "### Build Success! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "APK files generated:" >> $GITHUB_STEP_SUMMARY
          ls -lh bin/*.apk >> $GITHUB_STEP_SUMMARY || echo "No APK found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f bin/*.apk ]; then
            for apk in bin/*.apk; do
              echo "**File:** \`$(basename $apk)\`" >> $GITHUB_STEP_SUMMARY
              echo "**Size:** $(ls -lh $apk | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            done
          fi
