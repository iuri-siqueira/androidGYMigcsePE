name: Build GYM APK - Production

on: 
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
      architecture:
        description: 'Target architecture'
        required: true
        default: 'armeabi-v7a,arm64-v8a'
        type: choice
        options:
          - 'armeabi-v7a,arm64-v8a'
          - 'armeabi-v7a'
          - 'arm64-v8a'
          - 'x86'
          - 'x86_64'
      clean_build:
        description: 'Clean build (ignore cache)'
        required: false
        default: false
        type: boolean
      verbose:
        description: 'Verbose logging'
        required: false
        default: true
        type: boolean
  push:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - '**.kv'
      - 'buildozer.spec'
      - 'requirements.txt'
      - '.github/workflows/*.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - '**.kv'
      - 'buildozer.spec'
      - 'requirements.txt'
  schedule:
    # Nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  JAVA_VERSION: '17'
  BUILDOZER_VERSION: '1.5.0'
  CYTHON_VERSION: '0.29.36'
  P4A_VERSION: 'develop'
  NDK_VERSION: '25b'
  SDK_VERSION: '33'
  BUILD_TOOLS_VERSION: '33.0.2'
  GRADLE_VERSION: '7.6.3'
  # Optimization flags
  CCACHE_DIR: /tmp/ccache
  CCACHE_MAXSIZE: 10G
  CCACHE_COMPRESS: 1
  GRADLE_OPTS: '-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8'
  ANDROID_SDK_ROOT: /home/runner/.buildozer/android/platform/android-sdk
  ANDROID_HOME: /home/runner/.buildozer/android/platform/android-sdk
  ANDROID_NDK_ROOT: /home/runner/.buildozer/android/platform/android-ndk
  # Retry configuration
  MAX_RETRIES: 3
  RETRY_DELAY: 30

concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.architecture || 'default' }}
  cancel-in-progress: true

jobs:
  validate:
    name: üîç Validate Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      valid: ${{ steps.check.outputs.valid }}
      has_requirements: ${{ steps.check.outputs.has_requirements }}
      has_buildozer_spec: ${{ steps.check.outputs.has_buildozer_spec }}
      estimated_size: ${{ steps.check.outputs.estimated_size }}
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: üîç Validate project structure
        id: check
        run: |
          echo "valid=true" >> $GITHUB_OUTPUT
          ERRORS=""
          
          # Check for buildozer.spec
          if [ -f "buildozer.spec" ]; then
            echo "‚úÖ buildozer.spec found"
            echo "has_buildozer_spec=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå buildozer.spec not found!"
            echo "has_buildozer_spec=false" >> $GITHUB_OUTPUT
            ERRORS="$ERRORS\n- Missing buildozer.spec"
            echo "valid=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for main.py
          if [ -f "main.py" ]; then
            echo "‚úÖ main.py found"
          else
            echo "‚ùå main.py not found!"
            ERRORS="$ERRORS\n- Missing main.py"
            echo "valid=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for requirements
          if [ -f "requirements.txt" ]; then
            echo "‚úÖ requirements.txt found"
            echo "has_requirements=true" >> $GITHUB_OUTPUT
            
            # Validate requirements format
            python3 -m pip install pip-tools
            python3 -m piptools compile --dry-run requirements.txt 2>/dev/null || {
              echo "‚ö†Ô∏è Issues found in requirements.txt"
              ERRORS="$ERRORS\n- Invalid requirements.txt format"
            }
          else
            echo "‚ö†Ô∏è requirements.txt not found (optional)"
            echo "has_requirements=false" >> $GITHUB_OUTPUT
          fi
          
          # Estimate project size
          SIZE=$(du -sh . --exclude='.git' --exclude='.buildozer' | cut -f1)
          echo "üìä Project size: $SIZE"
          echo "estimated_size=$SIZE" >> $GITHUB_OUTPUT
          
          # Check Python syntax
          echo "üîç Checking Python syntax..."
          find . -name "*.py" -type f ! -path "./.buildozer/*" ! -path "./venv/*" -exec python3 -m py_compile {} + || {
            echo "‚ùå Python syntax errors found!"
            ERRORS="$ERRORS\n- Python syntax errors"
            echo "valid=false" >> $GITHUB_OUTPUT
          }
          
          if [ -n "$ERRORS" ]; then
            echo "### ‚ùå Validation Failed" >> $GITHUB_STEP_SUMMARY
            echo -e "Errors found:$ERRORS" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "### ‚úÖ Validation Passed" >> $GITHUB_STEP_SUMMARY
          echo "Project is ready for build!" >> $GITHUB_STEP_SUMMARY

  build:
    name: üî® Build APK (${{ matrix.arch }})
    needs: validate
    if: needs.validate.outputs.valid == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 150
    strategy:
      fail-fast: false
      matrix:
        arch: ${{ fromJSON(github.event.inputs.architecture == 'armeabi-v7a,arm64-v8a' && '["armeabi-v7a", "arm64-v8a"]' || '["' + (github.event.inputs.architecture || 'armeabi-v7a') + '"]') }}
    
    steps:
      - name: üíæ Free disk space
        run: |
          echo "Initial disk space:"
          df -h
          
          # Remove unnecessary packages
          sudo apt-get remove -y --allow-remove-essential \
            '^aspnetcore-.*' '^dotnet-.*' '^llvm-.*' 'php.*' '^mongodb-.*' '^mysql-.*' \
            azure-cli google-cloud-cli google-chrome-stable firefox powershell mono-devel \
            libgl1-mesa-dri android-sdk-platform-tools 2>/dev/null || true
          
          # Clean package manager
          sudo apt-get autoremove -y
          sudo apt-get autoclean -y
          sudo apt-get clean
          
          # Remove large directories
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo rm -rf /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/graalvm /usr/local/.ghcup /usr/local/share/powershell
          sudo rm -rf /usr/share/swift /usr/share/miniconda /usr/lib/jvm
          
          # Docker cleanup
          docker system prune -af
          docker volume prune -f
          
          echo "Disk space after cleanup:"
          df -h
          echo "Freed approximately 30GB of space"

      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: ‚òï Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: üöÄ Setup build environment
        run: |
          # Create necessary directories
          mkdir -p ~/.buildozer/android/platform
          mkdir -p ${{ env.CCACHE_DIR }}
          mkdir -p ~/bin
          
          # System configuration for better performance
          echo "vm.swappiness=10" | sudo tee -a /etc/sysctl.conf
          echo "vm.vfs_cache_pressure=50" | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p
          
          # Increase file limits
          ulimit -n 65536
          ulimit -c unlimited
          
          # Configure git for better performance
          git config --global core.preloadindex true
          git config --global core.fscache true
          git config --global gc.auto 256

      - name: üì¶ Install system dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          
          # Add multiarch support for better compatibility
          sudo dpkg --add-architecture i386
          
          # Retry apt update with fallback mirrors
          for i in {1..${{ env.MAX_RETRIES }}}; do
            sudo apt-get update -y && break || {
              echo "Retry $i/${{ env.MAX_RETRIES }} failed, waiting..."
              sleep ${{ env.RETRY_DELAY }}
              # Try alternative mirror on retry
              if [ $i -eq 2 ]; then
                sudo sed -i 's|http://archive.ubuntu.com|http://mirror.ubuntu.com|g' /etc/apt/sources.list
              fi
            }
          done
          
          # Install dependencies with retry logic
          for i in {1..${{ env.MAX_RETRIES }}}; do
            sudo apt-get install -y --no-install-recommends \
              build-essential ccache cmake ninja-build \
              git wget curl unzip zip p7zip-full \
              python3-dev python3-pip python3-setuptools \
              autoconf automake libtool pkg-config \
              zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev \
              libssl-dev libreadline-dev libffi-dev libsqlite3-dev \
              libbz2-dev liblzma-dev libgdbm-compat-dev \
              uuid-dev libxml2-dev libxslt1-dev \
              ffmpeg libavcodec-dev libavformat-dev libswscale-dev \
              libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
              libportmidi-dev libswresample-dev \
              libgstreamer1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
              openjdk-${{ env.JAVA_VERSION }}-jdk ant maven \
              libc6-i386 lib32stdc++6 lib32gcc-s1 lib32ncurses6 lib32z1 \
              patchelf bsdiff \
              && break || {
                echo "Retry $i/${{ env.MAX_RETRIES }} failed"
                sleep ${{ env.RETRY_DELAY }}
              }
          done
          
          # Configure ccache
          sudo ln -s /usr/bin/ccache /usr/local/bin/gcc
          sudo ln -s /usr/bin/ccache /usr/local/bin/g++
          sudo ln -s /usr/bin/ccache /usr/local/bin/cc
          sudo ln -s /usr/bin/ccache /usr/local/bin/c++
          
          ccache --set-config=max_size=${{ env.CCACHE_MAXSIZE }}
          ccache --set-config=compression=true
          ccache --set-config=compression_level=6
          ccache -z  # Zero statistics

      - name: üíæ Restore build cache
        if: github.event.inputs.clean_build != 'true'
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            ~/.buildozer
            ~/.gradle
            ~/.android
            ~/.cache/pip
            ${{ env.CCACHE_DIR }}
            ~/bin
          key: buildozer-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('buildozer.spec', 'requirements.txt') }}-${{ matrix.arch }}-${{ github.sha }}
          restore-keys: |
            buildozer-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('buildozer.spec', 'requirements.txt') }}-${{ matrix.arch }}-
            buildozer-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('buildozer.spec') }}-${{ matrix.arch }}-
            buildozer-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ matrix.arch }}-
            buildozer-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-

      - name: üîß Install Python dependencies
        run: |
          # Upgrade pip and core tools
          python -m pip install --upgrade pip setuptools wheel virtualenv
          
          # Install build tools with specific versions for stability
          python -m pip install --user \
            buildozer==${{ env.BUILDOZER_VERSION }} \
            cython==${{ env.CYTHON_VERSION }} \
            python-for-android==${{ env.P4A_VERSION }} \
            kivy==2.3.0 \
            kivymd==1.2.0 \
            pillow \
            requests \
            sh colorama pexpect \
            jinja2 six pyyaml \
            appdirs virtualenv \
            toml packaging
          
          # Install app requirements if present
          if [ -f requirements.txt ]; then
            echo "üì¶ Installing app requirements..."
            python -m pip install --user -r requirements.txt || {
              echo "‚ö†Ô∏è Some requirements failed, continuing..."
            }
          fi
          
          # Verify installations
          python -m pip list --user
          
          # Add local bin to PATH
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV

      - name: üî® Configure buildozer.spec
        run: |
          # Backup original
          cp buildozer.spec buildozer.spec.backup
          
          # Update architecture if specified
          if [ -n "${{ matrix.arch }}" ]; then
            sed -i "s/^android.archs = .*/android.archs = ${{ matrix.arch }}/" buildozer.spec || true
          fi
          
          # Ensure proper SDK/NDK versions
          sed -i "s/^# android.sdk = .*/android.sdk = ${{ env.SDK_VERSION }}/" buildozer.spec || true
          sed -i "s/^# android.ndk = .*/android.ndk = ${{ env.NDK_VERSION }}/" buildozer.spec || true
          
          # Set build tools version
          sed -i "s/^# android.build_tools_version = .*/android.build_tools_version = ${{ env.BUILD_TOOLS_VERSION }}/" buildozer.spec || true
          
          # Optimize gradle
          sed -i "s/^# android.gradle_dependencies = .*/android.gradle_dependencies = /" buildozer.spec || true
          
          # Enable AndroidX
          sed -i "s/^# android.enable_androidx = .*/android.enable_androidx = True/" buildozer.spec || true
          
          # Show configuration
          echo "üìã Buildozer configuration:"
          grep -E "^(title|package.name|source.dir|version|requirements|android.archs|android.sdk|android.ndk)" buildozer.spec

      - name: üèóÔ∏è Pre-download Android SDK/NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          # Create directories
          mkdir -p ~/.buildozer/android/platform
          
          # Pre-download Android SDK
          if [ ! -d "$ANDROID_SDK_ROOT" ]; then
            echo "üì• Downloading Android SDK..."
            cd ~/.buildozer/android/platform
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
            unzip -q cmdline-tools.zip
            rm cmdline-tools.zip
            
            # Install SDK components
            yes | cmdline-tools/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses || true
            cmdline-tools/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT \
              "platform-tools" \
              "platforms;android-${{ env.SDK_VERSION }}" \
              "build-tools;${{ env.BUILD_TOOLS_VERSION }}" \
              "extras;google;m2repository" \
              "extras;android;m2repository"
          fi
          
          # Verify installations
          ls -la ~/.buildozer/android/platform/ || true

      - name: üì± Build APK
        id: build
        env:
          BUILD_TYPE: ${{ github.event.inputs.build_type || 'debug' }}
          ARCH: ${{ matrix.arch }}
          P4A_RELEASE_KEYSTORE: ${{ secrets.KEYSTORE_PATH }}
          P4A_RELEASE_KEYSTORE_PASSWD: ${{ secrets.KEYSTORE_PASSWORD }}
          P4A_RELEASE_KEYALIAS_PASSWD: ${{ secrets.KEY_PASSWORD }}
          P4A_RELEASE_KEYALIAS: ${{ secrets.KEY_ALIAS }}
        run: |
          set -e  # Exit on error
          
          # Setup environment
          export PATH=$HOME/.local/bin:$PATH
          export ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk
          export ANDROID_HOME=$ANDROID_SDK_ROOT
          export ANDROID_NDK_ROOT=$HOME/.buildozer/android/platform/android-ndk
          
          # Clean if requested
          if [ "${{ github.event.inputs.clean_build }}" = "true" ]; then
            echo "üßπ Performing clean build..."
            rm -rf .buildozer/android/app
            rm -rf .buildozer/android/build
            rm -rf bin/
            buildozer android clean || true
          fi
          
          # Create bin directory
          mkdir -p bin
          
          # Determine buildozer command
          BUILDOZER_CMD="buildozer"
          if [ -x "$HOME/.local/bin/buildozer" ]; then
            BUILDOZER_CMD="$HOME/.local/bin/buildozer"
          fi
          
          # Verbose flag
          VERBOSE_FLAG=""
          if [ "${{ github.event.inputs.verbose }}" = "true" ]; then
            VERBOSE_FLAG="-v"
          fi
          
          # Build with retry logic
          BUILD_SUCCESS=false
          for attempt in {1..${{ env.MAX_RETRIES }}}; do
            echo "üî® Build attempt $attempt/${{ env.MAX_RETRIES }} for ${{ matrix.arch }}..."
            
            # Run build with timeout and error handling
            timeout 7200 $BUILDOZER_CMD $VERBOSE_FLAG android $BUILD_TYPE 2>&1 | tee build.log || BUILD_EXIT_CODE=$?
            
            if [ -z "$BUILD_EXIT_CODE" ] || [ "$BUILD_EXIT_CODE" -eq 0 ]; then
              # Check if APK was actually created
              if ls bin/*.apk 1> /dev/null 2>&1; then
                BUILD_SUCCESS=true
                echo "‚úÖ Build successful on attempt $attempt!"
                break
              else
                echo "‚ö†Ô∏è Build command succeeded but no APK found"
                tail -n 100 build.log
              fi
            else
              echo "‚ùå Build failed with exit code $BUILD_EXIT_CODE"
              
              # Analyze failure
              if grep -q "out of memory" build.log; then
                echo "üíæ Out of memory error detected, clearing caches..."
                ccache -C
                rm -rf ~/.gradle/caches/*
                # Reduce parallel jobs on retry
                export GRADLE_OPTS="$GRADLE_OPTS -Dorg.gradle.workers.max=2"
              elif grep -q "Could not find" build.log || grep -q "Could not resolve" build.log; then
                echo "üì¶ Dependency error detected, clearing gradle cache..."
                rm -rf ~/.gradle/caches/modules-2
              elif grep -q "No space left on device" build.log; then
                echo "üíæ Disk space issue, cleaning up..."
                df -h
                rm -rf /tmp/* 2>/dev/null || true
                docker system prune -af 2>/dev/null || true
              fi
              
              if [ $attempt -lt ${{ env.MAX_RETRIES }} ]; then
                echo "‚è≥ Waiting before retry..."
                sleep ${{ env.RETRY_DELAY }}
              fi
            fi
          done
          
          # Final check
          if [ "$BUILD_SUCCESS" = "true" ]; then
            APK_PATH=$(ls bin/*.apk | head -n 1)
            APK_NAME=$(basename "$APK_PATH")
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            
            echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
            echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
            echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT
            echo "arch=${{ matrix.arch }}" >> $GITHUB_OUTPUT
            echo "build_success=true" >> $GITHUB_OUTPUT
            
            # Verify APK
            echo "üîç Verifying APK..."
            file "$APK_PATH"
            unzip -l "$APK_PATH" | head -n 20
            
            # Get APK info using aapt if available
            if command -v aapt &> /dev/null; then
              aapt dump badging "$APK_PATH" | head -n 10
            fi
            
            # Generate SHA256 checksum
            sha256sum "$APK_PATH" > "$APK_PATH.sha256"
            echo "checksum=$(cat $APK_PATH.sha256)" >> $GITHUB_OUTPUT
            
            # ccache statistics
            echo "üìä Build statistics:"
            ccache -s
          else
            echo "‚ùå Build failed after ${{ env.MAX_RETRIES }} attempts"
            echo "build_success=false" >> $GITHUB_OUTPUT
            
            # Collect debug information
            echo "### Debug Information ###"
            echo "Disk space:"
            df -h
            echo "Memory:"
            free -h
            echo "Build log tail (last 200 lines):"
            tail -n 200 build.log
            
            # Upload debug artifacts even on failure
            exit 1
          fi

      - name: üìä Generate build report
        if: always()
        run: |
          echo "# üì± Build Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.build.outputs.build_success }}" = "true" ]; then
            echo "## ‚úÖ Build Successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **APK Name** | ${{ steps.build.outputs.apk_name }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Size** | ${{ steps.build.outputs.apk_size }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Architecture** | ${{ matrix.arch }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Build Type** | ${{ github.event.inputs.build_type || 'debug' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Python Version** | ${{ env.PYTHON_VERSION }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Build Date** | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY
            echo "| **Commit** | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Branch** | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Runner** | ${{ runner.os }} |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Checksum" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.build.outputs.checksum }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The build failed for architecture: ${{ matrix.arch }}" >> $GITHUB_STEP_SUMMARY
            echo "Please check the build logs for more information." >> $GITHUB_STEP_SUMMARY
          fi
          
          # System information
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### System Information" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Disk Usage** | $(df -h / | awk 'NR==2 {print $3 "/" $2 " (" $5 ")"}') |" >> $GITHUB_STEP_SUMMARY
          echo "| **Memory** | $(free -h | awk 'NR==2 {print $3 "/" $2}') |" >> $GITHUB_STEP_SUMMARY
          echo "| **CPU** | $(nproc) cores |" >> $GITHUB_STEP_SUMMARY
          echo "| **ccache Hit Rate** | $(ccache -s | grep "cache hit rate" | awk '{print $4}') |" >> $GITHUB_STEP_SUMMARY

      - name: üéØ APK validation
        if: steps.build.outputs.build_success == 'true'
        run: |
          APK_PATH="${{ steps.build.outputs.apk_path }}"
          
          # Basic validation
          if [ ! -f "$APK_PATH" ]; then
            echo "‚ùå APK file not found!"
            exit 1
          fi
          
          # Check minimum size (should be at least 1MB)
          APK_SIZE_BYTES=$(stat -c%s "$APK_PATH")
          if [ $APK_SIZE_BYTES -lt 1048576 ]; then
            echo "‚ùå APK is suspiciously small (less than 1MB)"
            exit 1
          fi
          
          # Verify it's a valid ZIP (APK)
          unzip -t "$APK_PATH" > /dev/null 2>&1 || {
            echo "‚ùå APK is not a valid ZIP file"
            exit 1
          }
          
          # Check for required APK components
          unzip -l "$APK_PATH" | grep -q "AndroidManifest.xml" || {
            echo "‚ùå APK missing AndroidManifest.xml"
            exit 1
          }
          
          unzip -l "$APK_PATH" | grep -q "classes.dex" || {
            echo "‚ùå APK missing classes.dex"
            exit 1
          }
          
          echo "‚úÖ APK validation passed!"

      - name: üì§ Upload APK artifact
        uses: actions/upload-artifact@v4
        if: steps.build.outputs.build_success == 'true'
        with:
          name: gym-apk-${{ github.event.inputs.build_type || 'debug' }}-${{ matrix.arch }}-${{ github.run_number }}
          path: |
            bin/*.apk
            bin/*.apk.sha256
          if-no-files-found: error
          compression-level: 9

      - name: üìã Upload build logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-logs-${{ matrix.arch }}-${{ github.run_number }}
          path: |
            build.log
            buildozer.spec
            .buildozer/android/platform/build-*/*/build/outputs/logs/
          if-no-files-found: ignore
          compression-level: 9

      - name: üíæ Save build cache
        if: always() && steps.build.outputs.build_success == 'true'
        run: |
          # Clean cache before saving
          echo "üßπ Cleaning cache..."
          
          # Remove temporary files
          find ~/.buildozer -name "*.tmp" -delete 2>/dev/null || true
          find ~/.buildozer -name "*.log" -delete 2>/dev/null || true
          find ~/.gradle -name "*.lock" -delete 2>/dev/null || true
          
          # Remove old gradle versions
          ls -t ~/.gradle/wrapper/dists/ | tail -n +3 | xargs -I {} rm -rf ~/.gradle/wrapper/dists/{} 2>/dev/null || true
          
          # ccache cleanup
          ccache -c
          
          echo "üìä Cache statistics:"
          du -sh ~/.buildozer 2>/dev/null || echo "No buildozer cache"
          du -sh ~/.gradle 2>/dev/null || echo "No gradle cache"
          du -sh ${{ env.CCACHE_DIR }} 2>/dev/null || echo "No ccache"

  merge-artifacts:
    name: üì¶ Merge APKs
    needs: build
    runs-on: ubuntu-latest
    if: always() && contains(needs.build.result, 'success')
    
    steps:
      - name: üì• Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: gym-apk-*
          path: artifacts/
          
      - name: üîÄ Merge APKs
        run: |
          mkdir -p final
          
          # Copy all APKs to final directory
          find artifacts -name "*.apk" -exec cp {} final/ \;
          find artifacts -name "*.sha256" -exec cp {} final/ \;
          
          # Create combined checksum file
          cd final
          sha256sum *.apk > checksums.sha256
          
          # List all APKs
          echo "üì± Built APKs:"
          ls -lh *.apk
          
          # Create info file
          echo "Build Information" > BUILD_INFO.txt
          echo "=================" >> BUILD_INFO.txt
          echo "Date: $(date -u)" >> BUILD_INFO.txt
          echo "Commit: ${{ github.sha }}" >> BUILD_INFO.txt
          echo "Branch: ${{ github.ref_name }}" >> BUILD_INFO.txt
          echo "Build Number: ${{ github.run_number }}" >> BUILD_INFO.txt
          echo "" >> BUILD_INFO.txt
          echo "APKs:" >> BUILD_INFO.txt
          ls -1 *.apk >> BUILD_INFO.txt
          
      - name: üì§ Upload final artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gym-apk-final-${{ github.run_number }}
          path: final/
          if-no-files-found: error

  release:
    name: üöÄ Create Release
    needs: [build, merge-artifacts]
    if: success() && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Download final artifacts
        uses: actions/download-artifact@v4
        with:
          name: gym-apk-final-${{ github.run_number }}
          path: release/
          
      - name: üè∑Ô∏è Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*.apk
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc') }}
          generate_release_notes: true
          fail_on_unmatched_files: false
          body: |
            ## üì± GYM App Release - ${{ github.ref_name }}
            
            ### üìä Build Information
            - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            - **Build Number**: #${{ github.run_number }}
            - **Commit**: ${{ github.sha }}
            - **Build Type**: ${{ github.event.inputs.build_type || 'debug' }}
            
            ### üì¶ Available APKs
            Multiple architecture builds are included in this release.
            Choose the appropriate APK for your device:
            - `armeabi-v7a` - 32-bit ARM devices (older phones)
            - `arm64-v8a` - 64-bit ARM devices (modern phones)
            - `x86` - Intel/AMD 32-bit (rare, some tablets)
            - `x86_64` - Intel/AMD 64-bit (rare, some tablets)
            
            Most modern Android devices use `arm64-v8a`.
            
            ### üì• Installation Instructions
            1. Download the appropriate APK for your device architecture
            2. Enable "Install from unknown sources" in Settings > Security
            3. Open the downloaded APK file to install
            4. If updating, uninstall the previous version first
            
            ### ‚úÖ Checksums
            SHA-256 checksums are provided for verification.
            
            ### üêõ Bug Reports
            Please report any issues at: ${{ github.server_url }}/${{ github.repository }}/issues
            
            ---
            *This is an automated release created by GitHub Actions*

  notify:
    name: üì¢ Send Notifications
    needs: [validate, build, merge-artifacts]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: üìä Build Summary
        run: |
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "‚úÖ Build completed successfully!"
          else
            echo "‚ùå Build failed. Check the logs for details."
          fi
          
          echo "Build URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
      - name: üí¨ Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ needs.build.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            const message = `### ${status} APK Build ${{ needs.build.result === 'success' ? 'Successful' : 'Failed' }}
            
            **Build #${{ github.run_number }}**
            **Commit**: ${{ github.sha }}
            
            ${status === '‚úÖ' ? 'APK artifacts are available in the [Actions tab](' : 'Check the [build logs]('}${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).
            
            <details>
            <summary>Build Configuration</summary>
            
            - Build Type: ${{ github.event.inputs.build_type || 'debug' }}
            - Architecture: ${{ github.event.inputs.architecture || 'armeabi-v7a,arm64-v8a' }}
            - Python: ${{ env.PYTHON_VERSION }}
            - Java: ${{ env.JAVA_VERSION }}
            - Buildozer: ${{ env.BUILDOZER_VERSION }}
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
