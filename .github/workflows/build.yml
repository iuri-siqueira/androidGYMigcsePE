name: Build GYM APK

on: 
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
      architecture:
        description: 'Target architecture'
        required: true
        default: 'armeabi-v7a,arm64-v8a'
        type: choice
        options:
          - 'armeabi-v7a,arm64-v8a'
          - 'armeabi-v7a'
          - 'arm64-v8a'
          - 'x86'
          - 'x86_64'
      clean_build:
        description: 'Clean build (ignore cache)'
        required: false
        default: false
        type: boolean
  push:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - '**.kv'
      - 'buildozer.spec'
      - 'requirements.txt'
      - '.github/workflows/*.yml'
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  JAVA_VERSION: '17'
  BUILDOZER_VERSION: '1.5.0'
  CYTHON_VERSION: '0.29.36'
  NDK_VERSION: '25b'
  SDK_VERSION: '33'
  BUILD_TOOLS_VERSION: '33.0.2'
  CCACHE_DIR: /tmp/ccache
  CCACHE_MAXSIZE: 10G
  GRADLE_OPTS: '-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8'

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate Project
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      valid: ${{ steps.check.outputs.valid }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate structure
        id: check
        run: |
          echo "valid=true" >> $GITHUB_OUTPUT
          
          if [ ! -f "buildozer.spec" ]; then
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "ERROR: buildozer.spec not found"
            exit 1
          fi
          
          if [ ! -f "main_android.py" ]; then
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "ERROR: main_android.py not found"
            exit 1
          fi
          
          python3 -m py_compile main_android.py || {
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "ERROR: Python syntax errors in main_android.py"
            exit 1
          }
          
          echo "Project validation passed"

  build:
    name: Build APK
    needs: validate
    if: needs.validate.outputs.valid == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
      - name: Free disk space
        run: |
          df -h
          sudo apt-get remove -y '^aspnetcore-.*' '^dotnet-.*' '^llvm-.*' 'php.*' '^mongodb-.*' '^mysql-.*' azure-cli google-cloud-cli google-chrome-stable firefox powershell mono-devel 2>/dev/null || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/graalvm /usr/local/.ghcup /usr/share/swift
          sudo docker system prune -af
          df -h

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install system dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential ccache cmake \
            git wget curl unzip zip p7zip-full \
            python3-dev python3-pip python3-setuptools \
            autoconf automake libtool libtool-bin pkg-config texinfo \
            zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev \
            libssl-dev libreadline-dev libffi-dev libsqlite3-dev \
            libbz2-dev liblzma-dev \
            ffmpeg \
            libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
            libportmidi-dev \
            libgstreamer1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
            openjdk-${{ env.JAVA_VERSION }}-jdk \
            libc6-i386 lib32stdc++6 lib32gcc-s1 lib32ncurses6 lib32z1 \
            patchelf

          sudo ln -s /usr/bin/ccache /usr/local/bin/gcc
          sudo ln -s /usr/bin/ccache /usr/local/bin/g++
          sudo ln -s /usr/bin/ccache /usr/local/bin/cc
          sudo ln -s /usr/bin/ccache /usr/local/bin/c++

          ccache --set-config=max_size=${{ env.CCACHE_MAXSIZE }}
          ccache -z

          # Verify autotools installation
          autoconf --version
          automake --version
          libtoolize --version

      - name: Cache build dependencies
        if: github.event.inputs.clean_build != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.buildozer
            ~/.gradle
            ~/.cache/pip
            ${{ env.CCACHE_DIR }}
          key: buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec', 'requirements.txt') }}-${{ github.sha }}
          restore-keys: |
            buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec', 'requirements.txt') }}-
            buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}-
            buildozer-${{ runner.os }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --user \
            buildozer==${{ env.BUILDOZER_VERSION }} \
            cython==${{ env.CYTHON_VERSION }} \
            git+https://github.com/kivy/python-for-android.git@develop \
            kivy kivymd \
            sh colorama

          if [ -f requirements.txt ]; then
            python -m pip install --user -r requirements.txt
          fi

          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV

          # Verify python-for-android installation
          p4a --version

      - name: Validate build environment
        run: |
          chmod +x test_build_env.sh
          ./test_build_env.sh || echo "Validation completed with warnings"

      - name: Configure buildozer
        run: |
          cp buildozer.spec buildozer.spec.backup

          sed -i "s/^android.sdk = .*/android.sdk = ${{ env.SDK_VERSION }}/" buildozer.spec || true
          sed -i "s/^android.ndk = .*/android.ndk = ${{ env.NDK_VERSION }}/" buildozer.spec || true
          sed -i "s/^android.build_tools_version = .*/android.build_tools_version = ${{ env.BUILD_TOOLS_VERSION }}/" buildozer.spec || true
          sed -i "s/^android.enable_androidx = .*/android.enable_androidx = True/" buildozer.spec || true

      - name: Build APK
        id: build
        env:
          BUILD_TYPE: ${{ github.event.inputs.build_type || 'debug' }}
        run: |
          set -e
          export PATH=$HOME/.local/bin:$PATH
          export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
          export ANDROID_SDK_ROOT=$ANDROID_HOME

          # Set environment variables to help with autotools/libffi build
          export ACLOCAL_PATH=/usr/share/aclocal
          export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/share/pkgconfig
          
          if [ "${{ github.event.inputs.clean_build }}" = "true" ]; then
            rm -rf .buildozer/android/app
            rm -rf .buildozer/android/build
            rm -rf bin/
          fi
          
          mkdir -p bin
          
          BUILDOZER_CMD="buildozer"
          if [ -x "$HOME/.local/bin/buildozer" ]; then
            BUILDOZER_CMD="$HOME/.local/bin/buildozer"
          fi
          
          BUILD_SUCCESS=false
          for attempt in 1 2 3; do
            echo "Build attempt $attempt/3..."
            
            if timeout 7200 $BUILDOZER_CMD -v android $BUILD_TYPE 2>&1 | tee build.log; then
              if ls bin/*.apk 1> /dev/null 2>&1; then
                BUILD_SUCCESS=true
                echo "Build successful!"
                break
              fi
            fi
            
            if [ $attempt -lt 3 ]; then
              echo "Build failed, retrying..."
              sleep 30
              
              if grep -q "out of memory" build.log; then
                ccache -C
                export GRADLE_OPTS="$GRADLE_OPTS -Dorg.gradle.workers.max=2"
              elif grep -q "No space left" build.log; then
                rm -rf /tmp/* 2>/dev/null || true
                sudo docker system prune -af 2>/dev/null || true
              fi
            fi
          done
          
          if [ "$BUILD_SUCCESS" = "true" ]; then
            APK_PATH=$(ls bin/*.apk | head -n 1)
            APK_NAME=$(basename "$APK_PATH")
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            
            echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
            echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
            echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT
            echo "build_success=true" >> $GITHUB_OUTPUT
            
            sha256sum "$APK_PATH" > "$APK_PATH.sha256"
          else
            echo "Build failed after 3 attempts"
            echo "build_success=false" >> $GITHUB_OUTPUT
            tail -n 200 build.log
            exit 1
          fi

      - name: Build summary
        if: always()
        run: |
          if [ "${{ steps.build.outputs.build_success }}" = "true" ]; then
            echo "### Build Successful ✅" >> $GITHUB_STEP_SUMMARY
            echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| APK Name | ${{ steps.build.outputs.apk_name }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Size | ${{ steps.build.outputs.apk_size }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Build Type | ${{ github.event.inputs.build_type || 'debug' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Build Failed ❌" >> $GITHUB_STEP_SUMMARY
            echo "Check the build logs for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload APK
        uses: actions/upload-artifact@v4
        if: steps.build.outputs.build_success == 'true'
        with:
          name: gym-apk-${{ github.event.inputs.build_type || 'debug' }}-${{ github.run_number }}
          path: |
            bin/*.apk
            bin/*.apk.sha256
          if-no-files-found: error

      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs-${{ github.run_number }}
          path: |
            build.log
            buildozer.spec
          if-no-files-found: ignore

  release:
    name: Create Release
    needs: build
    if: success() && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          pattern: gym-apk-*
          path: release/
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/**/*.apk
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
